"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")
"Can be used as an argument to upload files using https://github.com/jaydenseric/graphql-multipart-request-spec"
scalar Upload @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Upload")


extend type Query {
    products: [Product!]! @paginate(model: "App\\Modules\\Product\\Models\\Product")
    productById(id: ID @eq): Product @find(model: "App\\Modules\\Product\\Models\\Product")
    types: [Type!]! @paginate(model: "App\\Modules\\Product\\Models\\Type")
    typeById(id: ID @eq): Type @find(model: "App\\Modules\\Product\\Models\\Type")
    discounts: [Discount!]! @paginate(model: "App\\Modules\\Product\\Models\\Discount")
    discountById(id: ID @eq): Discount @find(model: "App\\Modules\\Product\\Models\\Discount")
    images: [Image!]! @paginate(model: "App\\Modules\\Product\\Models\\Image")
    imageById(id: ID @eq): Image @find(model: "App\\Modules\\Product\\Models\\Image")
    categories: [Category!]! @paginate(model: "App\\Modules\\Product\\Models\\Category")
    categoryById(id: ID @eq): Category @find(model: "App\\Modules\\Product\\Models\\Category")
}

extend type Mutation {
    productUpsert(input: ProductUpsertInput @spread): Product! @field(resolver: "App\\GraphQL\\Mutations\\Product\\ProductMutation@upsert") @guard
    productDelete(id: ID! @wherekey): Product! @field(resolver: "App\\GraphQL\\Mutations\\Product\\ProductMutation@destroy") @guard
    typeUpsert(input: TypeUpsertInput @spread): Type! @field(resolver: "App\\GraphQL\\Mutations\\Product\\TypeMutation@upsert") @guard
    typeDelete(id: ID! @wherekey): Type! @field(resolver: "App\\GraphQL\\Mutations\\Product\\TypeMutation@destroy") @guard
    discountUpsert(input: DiscountUpsertInput @spread): Discount! @field(resolver: "App\\GraphQL\\Mutations\\Product\\DiscountMutation@upsert") @guard
    discountDelete(id: ID! @wherekey): Discount! @field(resolver: "App\\GraphQL\\Mutations\\Product\\DiscountMutation@destroy") @guard
    imageUpsert(url: Upload!, product_id: Int!): Image! @field(resolver: "App\\GraphQL\\Mutations\\Product\\ImageMutation@upsert") @guard
    imageDelete(id: ID! @wherekey): Image! @field(resolver: "App\\GraphQL\\Mutations\\Product\\ImageMutation@destroy") @guard
    categoryUpsert(input: CategoryUpsertInput @spread): Category! @field(resolver: "App\\GraphQL\\Mutations\\Product\\CategoryMutation@upsert") @guard
    categoryDelete(id: ID! @wherekey): Category! @field(resolver: "App\\GraphQL\\Mutations\\Product\\CategoryMutation@destroy") @guard
}

type Product {
    id: ID!
    name: String!
    description: String
    sku: String
    price: Int!
    stock: Int!
    type: Type @belongsTo(model: "App\\Modules\\Product\\Models\\Type")
    discount: Discount @belongsTo(model: "App\\Modules\\Product\\Models\\Discount")
    images: [Image] @hasMany(model: "App\\Modules\\Product\\Models\\Image")
    categories: [Category] @belongsToMany(model: "App\\Modules\\Product\\Models\\Category")
}

type Type {
    id: ID!
    name: String!
    slug: String
    products: [Product!]! @hasMany(model: "App\\Modules\\Product\\Models\\Product")
}

type Discount {
    id: ID!
    name: String!
    value: Int!
    type: String!
    start_date: DateTime!
    expiration_date: DateTime!
    products: [Product!]! @hasMany(model: "App\\Modules\\Product\\Models\\Product")
}

type Image {
    id: ID!
    url: String!
    product: Product! @belongsTo(model: "App\\Modules\\Product\\Models\\Product")
}

type Category {
    id: ID!
    name: String!
    slug: String
    parent: Category @belongsTo(model: "App\\Modules\\Product\\Models\\Category")
    children: [Category] @hasMany(model: "App\\Modules\\Product\\Models\\Category")
    products: [Product] @belongsToMany(model: "App\\Modules\\Product\\Models\\Product")
}

input ProductUpsertInput {
    id: ID
    name: String!
    description: String
    sku: String
    type_id: Int
    discount_id: Int
    price: Int!
    stock: Int!
    category: Int!
}

input TypeUpsertInput {
    id: ID
    name: String!
}

input DiscountUpsertInput {
    id: ID
    name: String!
    value: Int!
    type: DiscountType!
    start_date: DateTime!
    expiration_date: DateTime!
}

enum DiscountType {
    NEW @enum(value: "new")
    SALE @enum(value: "sale")
    LIMIT @enum(value: "limit")
}

input CategoryUpsertInput {
    id: ID
    name: String!
    parent_id: Int
}

